(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, delay, animationClass, BigText, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('./std'), id = ref$.id, log = ref$.log, delay = ref$.delay;
animationClass = 'reveal';
out$.BigText = BigText = function(host){
  var span, show;
  span = host.querySelector('span');
  show = function(text){
    host.style.visibility = 'hidden';
    host.classList.remove(animationClass);
    span.textContent = text;
    return delay(0, function(){
      host.style.visibility = 'visible';
      return delay(0, function(){
        return host.classList.add(animationClass);
      });
    });
  };
  return {
    show: function(it){
      return show(it);
    },
    clear: function(){
      return host.style.visibility = 'hidden';
    }
  };
};



},{"./std":14}],2:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, onTap, getUserMedia, Camera, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('./std'), id = ref$.id, log = ref$.log, onTap = ref$.onTap;
getUserMedia = navigator.webkitGetUserMedia != null
  ? bind$(navigator, 'webkitGetUserMedia')
  : bind$(navigator, 'getUserMedia');
out$.Camera = Camera = function(host, size){
  var canvas, button, video, state, onStreamAvailable, onMediaFail, clear, ctx;
  size == null && (size = 1000);
  canvas = host.querySelector('canvas');
  button = host.querySelector('button');
  video = host.querySelector('video');
  state = {
    stream: null
  };
  onStreamAvailable = function(stream){
    state.stream = stream;
    video.src = URL.createObjectURL(stream);
    return video.play();
  };
  onMediaFail = function(it){
    return console.error("Can't get userMedia:", it);
  };
  clear = function(){
    return ctx.clearRect(0, 0, size, size);
  };
  ctx = canvas.getContext('2d');
  canvas.width = canvas.height = size;
  onTap(canvas, clear);
  return {
    init: function(){
      return getUserMedia({
        video: true
      }, onStreamAvailable, onMediaFail);
    },
    clear: function(){
      return clear();
    },
    capture: function(){
      return ctx.drawImage(video, 0, 0, size, size);
    },
    stop: function(){
      return state.stream.getVideoTracks().map(function(it){
        return it.stop();
      });
    },
    getImg: function(){
      return canvas.toDataURL('image/jpeg', 0.8);
    },
    onButton: function(it){
      return onTap(button, it);
    }
  };
};
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{"./std":14}],3:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
global.DEBUG_REGEN_GAMES = true;
global.DEBUG_REGEN_PLAYERS = true;
global.STORAGE_KEY = 'ping-pong-data';
global.MAX_SCORE = 11;



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],4:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
global.NO_PLAYER_SELECTED = Symbol('no-player');
global.EVENT_GAME_STARTING = Symbol('game-start');
global.GAME_STAGE_NO_GAME = Symbol('no-game');
global.GAME_STAGE_BRAND_NEW = Symbol('start');
global.GAME_STAGE_PLAYER_SELECT = Symbol('select');
global.GAME_STAGE_IN_PROGRESS = Symbol('playing');
global.GAME_STAGE_COMPLETE = Symbol('complete');
global.META_STATE_LEADERBOARD = Symbol('meta-leaderboard');
global.META_STATE_PLAYER_SELECT = Symbol('meta-player-select');
global.META_STATE_GAME_IN_PROGRESS = Symbol('meta-game-in-progress');
global.META_STATE_STATS = Symbol('meta-stats');
global.META_STATE_ADD_PLAYER = Symbol('meta-add-player');



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],5:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
var ref$, id, log, rand, max, qsa, int, onTap, contains, toArray, initialState, persistState, getAllPlayers, getPlayerFromId, generateStats, Pane, newPlayer, nextAvailablePlayerId, matchPlayer, includingPlayer, mostRecent, derivePlayerRanking, newGameState, renderStatsRow, Leaderboard, PlayerSelect, PlayerStats, MatchProgress, AddPlayer, setMetastate;
require('./config');
require('./const');
ref$ = require('./std'), id = ref$.id, log = ref$.log, rand = ref$.rand, max = ref$.max, qsa = ref$.qsa, int = ref$.int, onTap = ref$.onTap, contains = ref$.contains, toArray = ref$.toArray;
ref$ = require('./persist'), initialState = ref$.initialState, persistState = ref$.persistState, getAllPlayers = ref$.getAllPlayers, getPlayerFromId = ref$.getPlayerFromId;
generateStats = require('./stats').generateStats;
Pane = require('./pane').Pane;
newPlayer = function(arg$){
  var name, image;
  name = arg$.name, image = arg$.image;
  return {
    name: name,
    image: image,
    id: nextAvailablePlayerId()
  };
};
nextAvailablePlayerId = function(){
  return 1 + State.players.reduce(function(){
    return max(arguments[0], arguments[1].id);
  }, 0);
};
matchPlayer = curry$(function(arg$, x){
  var id;
  id = arg$.id;
  return x.id === id;
});
includingPlayer = function(player){
  return function(game){
    return game.playerA.id === player.id || game.playerB.id === player.id;
  };
};
mostRecent = function(a, b){
  if (a.time > b.time) {
    return a;
  } else {
    return b;
  }
};
derivePlayerRanking = function(players, games){
  var rankings, res$, i$, len$, player, rankingOf, i, ref$, winnerId, loserId, loser;
  res$ = [];
  for (i$ = 0, len$ = players.length; i$ < len$; ++i$) {
    player = players[i$];
    res$.push(player.id);
  }
  rankings = res$;
  rankingOf = bind$(rankings, 'indexOf');
  for (i$ = 0, len$ = games.length; i$ < len$; ++i$) {
    i = i$;
    ref$ = games[i$], winnerId = ref$.winnerId, loserId = ref$.loserId;
    if (rankingOf(winnerId) > rankingOf(loserId)) {
      loser = rankings.splice(rankingOf(winnerId), 1)[0];
      rankings.splice(rankingOf(loserId), 0, loser);
    }
  }
  return rankings;
};
newGameState = function(){
  return {
    stage: GAME_STAGE_BRAND_NEW,
    playerA: {
      info: NO_PLAYER_SELECTED,
      score: 0
    },
    playerB: {
      info: NO_PLAYER_SELECTED,
      score: 0
    }
  };
};
renderStatsRow = function(arg$){
  var player, wins, total, ratio, score;
  player = arg$.player, wins = arg$.wins, total = arg$.total, ratio = arg$.ratio, score = arg$.score;
  return "<tr>\n  <td><img src=\"" + player.image + "\">" + player.name + "</td>\n  <td>" + wins + "</td>\n  <td>" + ratio + "</td>\n  <td>" + total + "</td>\n  <td>" + score + "</td>\n</tr>";
};
Leaderboard = require('./panes/leaderboard');
PlayerSelect = require('./panes/player-select');
PlayerStats = require('./panes/stats');
MatchProgress = require('./panes/match-progress');
AddPlayer = require('./panes/add-player');
setMetastate = function(metastate, options){
  State.currentPane.conceal();
  switch (metastate) {
  case META_STATE_LEADERBOARD:
    Leaderboard.updateRanking(State);
    Leaderboard.reveal();
    break;
  case META_STATE_PLAYER_SELECT:
    PlayerSelect.populateChoices(getAllPlayers());
    PlayerSelect.reveal();
    break;
  case META_STATE_GAME_IN_PROGRESS:
    MatchProgress.beginNewMatch(options);
    MatchProgress.reveal();
    break;
  case META_STATE_STATS:
    PlayerStats.populateStats(State.players, State.games);
    PlayerStats.reveal();
    break;
  case META_STATE_ADD_PLAYER:
    AddPlayer.begin();
    AddPlayer.reveal();
    break;
  default:
    return console.error("Unknown metagamestate: ", metastate);
  }
  return State.metastate = metastate;
};
Leaderboard.onStartMatch(function(){
  return setMetastate(META_STATE_PLAYER_SELECT);
});
Leaderboard.onShowStats(function(){
  return setMetastate(META_STATE_STATS);
});
Leaderboard.onAddPlayer(function(){
  return setMetastate(META_STATE_ADD_PLAYER);
});
PlayerSelect.onSelection(function(it){
  return setMetastate(META_STATE_GAME_IN_PROGRESS, it.map(getPlayerFromId));
});
PlayerSelect.onCancel(function(){
  return log('bail');
});
MatchProgress.onMatchComplete(function(it){
  return log('complete', it);
});
MatchProgress.onCancel(function(){
  return log('bail');
});
PlayerStats.onStartMatch(function(){
  return setMetastate(META_STATE_PLAYER_SELECT);
});
PlayerStats.onAddPlayer(function(){
  return setMetastate(META_STATE_ADD_PLAYER);
});
PlayerStats.onShowRankings(function(){
  return setMetastate(META_STATE_LEADERBOARD);
});
AddPlayer.onComplete(function(){
  return log('complete');
});
AddPlayer.onCancel(function(){
  return log('cancel');
});
global.State = initialState({
  currentPane: AddPlayer
});
AddPlayer.begin();
State.currentPane.reveal();
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./config":3,"./const":4,"./pane":6,"./panes/add-player":7,"./panes/leaderboard":8,"./panes/match-progress":9,"./panes/player-select":10,"./panes/stats":11,"./persist":12,"./stats":13,"./std":14}],6:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, findDom, onTap, qsa, actionButtons, Pane, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
ref$ = require('./std'), id = ref$.id, log = ref$.log, findDom = ref$.findDom, onTap = ref$.onTap, qsa = ref$.qsa;
actionButtons = function(subdom){
  var buttonInfo, i$, len$, info, resultObj$ = {};
  buttonInfo = qsa(subdom, '[data-action]').map(function(button){
    return {
      el: button,
      action: button.dataset.action,
      onAction: function(it){
        return onTap(button, it);
      }
    };
  });
  for (i$ = 0, len$ = buttonInfo.length; i$ < len$; ++i$) {
    info = buttonInfo[i$];
    resultObj$[info.action] = info;
  }
  return resultObj$;
};
out$.Pane = Pane = (function(){
  Pane.displayName = 'Pane';
  var prototype = Pane.prototype, constructor = Pane;
  function Pane(selector, init){
    this._register = curry$(prototype.register, true);
    this.register = bind$(this, '_register');
    this.enqueue = bind$(this, 'enqueue', prototype);
    this.dispatch = bind$(this, 'dispatch', prototype);
    this.dom = {
      main: findDom(selector)
    };
    this.state = {};
    this.callbacks = {};
    this.actions = actionButtons(this.dom.main);
    init.call(this, this.dom.main);
    this.conceal();
  }
  prototype.register = function(event, λ){
    return this.callbacks[event] = λ;
  };
  prototype.dispatch = function(event){
    var args, ref$;
    args = slice$.call(arguments, 1);
    return (ref$ = this.callbacks[event]) != null ? ref$.apply(null, args) : void 8;
  };
  prototype.enqueue = function(event, args){
    var this$ = this;
    args == null && (args = []);
    return function(){
      var ref$;
      return (ref$ = this$.callbacks[event]) != null ? ref$.apply(null, args) : void 8;
    };
  };
  prototype.reveal = function(){
    return this.dom.main.style.opacity = 1;
  };
  prototype.conceal = function(){
    return this.dom.main.style.opacity = 0.2;
  };
  return Pane;
}());
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}



},{"./std":14}],7:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, qsa, onTap, delay, BigText, Camera, Pane;
ref$ = require('../std'), id = ref$.id, log = ref$.log, qsa = ref$.qsa, onTap = ref$.onTap, delay = ref$.delay;
BigText = require('../big-text').BigText;
Camera = require('../camera').Camera;
Pane = require('../pane').Pane;
module.exports = new Pane('[data-view="add-player"]', function(host){
  var countdownData, bigText, camera, countdown, takePhoto;
  countdownData = [[2, "LOOK MEAN IN..."], [1, "3"], [1, "2"], [1, "1"]];
  bigText = BigText(host.querySelector('[data-big-text]'));
  camera = Camera(host.querySelector('[data-camera]'));
  countdown = function(data, λ){
    var elapsed, start, i$, len$;
    elapsed = 0;
    start = Date.now();
    for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
      (fn$.call(this, i$, data[i$]));
    }
    return delay(elapsed, λ);
    function fn$(i, arg$){
      var t, text;
      t = arg$[0], text = arg$[1];
      delay(elapsed, function(){
        return bigText.show(text);
      });
      elapsed += t * 1000;
    }
  };
  takePhoto = function(){
    var imageData;
    bigText.clear();
    camera.capture();
    imageData = camera.getImg();
    return camera.stop();
  };
  this.onComplete = this.register('complete');
  this.onCancel = this.register('cancel');
  this.begin = function(){
    return camera.init();
  };
  return camera.onButton(function(){
    return countdown(countdownData, takePhoto);
  });
});



},{"../big-text":1,"../camera":2,"../pane":6,"../std":14}],8:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, qsa, getPlayerFromId, Pane, renderPlayerRanking;
ref$ = require('../std'), id = ref$.id, log = ref$.log, qsa = ref$.qsa;
getPlayerFromId = require('../persist').getPlayerFromId;
Pane = require('../pane').Pane;
renderPlayerRanking = function(playerId, ix){
  var player;
  player = getPlayerFromId(playerId);
  return "<div class=\"ranked-player\"><img src=\"" + player.image + "\"><span>" + player.name + "</span></div>";
};
module.exports = new Pane('[data-view="ranking"]', function(host){
  var event, ref$, action, this$ = this;
  this.dom.ranks = host.querySelector('[data-rankings]');
  for (event in ref$ = this.actions) {
    action = ref$[event];
    this.callbacks[event] = id;
    action.onAction(bind$(this, 'enqueue')(event));
  }
  this.onStartMatch = this.register('startGame');
  this.onAddPlayer = this.register('addPlayer');
  this.onShowStats = this.register('showStats');
  return this.updateRanking = function(rankings){
    var rankHtml;
    rankHtml = rankings.map(renderPlayerRanking);
    return this$.dom.ranks.innerHTML = rankHtml.join('');
  };
});
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{"../pane":6,"../persist":12,"../std":14}],9:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, qsa, onTap, Pane;
ref$ = require('../std'), id = ref$.id, log = ref$.log, qsa = ref$.qsa, onTap = ref$.onTap;
Pane = require('../pane').Pane;
module.exports = new Pane('[data-view="match"]', function(host){
  var scores, playerView, playerViews;
  scores = [MAX_SCORE - 1, 0];
  playerView = function(dom, q){
    var image, score;
    q == null && (q = bind$(dom, 'querySelector'));
    q = bind$(dom, 'querySelector');
    image = q('img');
    score = q('.score');
    return {
      update: function(it){
        return score.textContent = it;
      },
      onTap: function(it){
        return onTap(dom, it);
      },
      populate: function(player){
        image.src = player.image;
        return score.textContent = 0;
      }
    };
  };
  playerViews = qsa(host, '[data-player-view]').map(playerView);
  playerViews.map(function(player, ix){
    return player.onTap(function(){
      scores[ix] += 1;
      player.update(scores[ix]);
      if (scores[ix] >= MAX_SCORE) {
        return log('done');
      }
    });
  });
  this.beginNewMatch = function(players){
    var i$, ref$, len$, ix, view, results$ = [];
    State.panes.match.players = players;
    State.panes.match.stage = GAME_STAGE_IN_PROGRESS;
    State.panes.match.scores = [0, 0];
    for (i$ = 0, len$ = (ref$ = playerViews).length; i$ < len$; ++i$) {
      ix = i$;
      view = ref$[i$];
      results$.push(view.populate(players[ix]));
    }
    return results$;
  };
  this.onMatchComplete = this.register('complete');
  return this.onCancel = this.register('cancel');
});
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{"../pane":6,"../std":14}],10:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, contains, int, onTap, toArray, Pane;
ref$ = require('../std'), id = ref$.id, log = ref$.log, contains = ref$.contains, int = ref$.int, onTap = ref$.onTap, toArray = ref$.toArray;
Pane = require('../pane').Pane;
module.exports = new Pane('[data-view="player-select"]', function(host){
  var selectPlayer, markSelectedPlayers, ready, this$ = this;
  this.dom.choices = host.querySelector('[data-player-choices]');
  this.dom.buttons = [];
  this.state.selectedPlayers = [];
  selectPlayer = function(playerId){
    return function(){
      var ref$;
      if (contains(this$.state.selectedPlayers, playerId)) {
        (ref$ = this$.state).selectedPlayers = ref$.selectedPlayers.filter((function(it){
          return it !== playerId;
        }));
      } else if (this$.state.selectedPlayers.length >= 2) {
        console.warn("Can't select more than two, obviously");
      } else {
        this$.state.selectedPlayers.push(playerId);
      }
      this$.actions.ready.el.disabled = this$.state.selectedPlayers.length < 2;
      return markSelectedPlayers(this$.state.selectedPlayers);
    };
  };
  markSelectedPlayers = function(playerIds){
    return this$.dom.buttons.map(function(it){
      switch (playerIds.indexOf(int(it.dataset.player))) {
      case 0:
        return it.dataset.selection = "first";
      case 1:
        return it.dataset.selection = "second";
      default:
        it.dataset.selection = "";
        return it.disabled = playerIds.length >= 2;
      }
    });
  };
  ready = function(){
    this$.dispatch('select', this$.state.selectedPlayers);
    return this$.state.selectedPlayers = [];
  };
  this.callbacks.select = id;
  this.actions.ready.onAction(ready);
  this.populateChoices = function(players){
    var i$, len$, player, button;
    this.dom.choices.innerHTML = "";
    for (i$ = 0, len$ = players.length; i$ < len$; ++i$) {
      player = players[i$];
      button = document.createElement('button');
      button.dataset.player = player.id;
      button.classList.add('selectable-player');
      button.innerHTML = "<img src='" + player.image + "'>";
      this.dom.choices.appendChild(button);
      onTap(button, selectPlayer(player.id));
    }
    return this.dom.buttons = toArray(this.dom.choices.children);
  };
  this.onSelection = this.register('select');
  return this.onCancel = this.register('cancel');
});



},{"../pane":6,"../std":14}],11:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Pane;
ref$ = require('../std'), id = ref$.id, log = ref$.log;
Pane = require('../pane').Pane;
module.exports = new Pane('[data-view="stats"]', function(host){
  this.onStartMatch = this.register('startMatch');
  this.onAddPlayer = this.register('addPlayer');
  return this.onShowRankings = this.register('showRankings');
});



},{"../pane":6,"../std":14}],12:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, rand, blankDataset, genMockPlayers, genMockGames, validGame, newGame, findOutcome, initialState, persistState, hydrateState, getAllPlayers, getPlayerFromId, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('./std'), id = ref$.id, log = ref$.log, rand = ref$.rand;
blankDataset = function(arg$){
  var currentPane;
  currentPane = arg$.currentPane;
  return {
    currentPane: currentPane,
    metastate: META_STATE_LEADERBOARD,
    panes: {
      stats: {},
      match: {
        stage: GAME_STAGE_NO_GAME,
        players: []
      },
      ranking: {
        ranking: []
      },
      addPlayer: {},
      selectPlayer: {}
    },
    records: {
      games: DEBUG_REGEN_GAMES
        ? genMockGames()
        : [],
      players: DEBUG_REGEN_PLAYERS
        ? genMockPlayers()
        : []
    }
  };
};
genMockPlayers = function(){
  var players;
  return players = [
    {
      id: 0,
      name: 'Arya',
      image: '/images/arya.jpeg'
    }, {
      id: 1,
      name: 'Brienne',
      image: '/images/brienne.jpeg'
    }, {
      id: 2,
      name: 'Cersei',
      image: '/images/cersei.jpeg'
    }, {
      id: 3,
      name: 'Daenerys',
      image: '/images/daenerys.jpeg'
    }
  ];
};
genMockGames = function(){
  var games, res$, i$, i;
  res$ = [];
  for (i$ = 0; i$ <= 20; ++i$) {
    i = i$;
    res$.push(newGame({
      id: rand(0, 2),
      score: MAX_SCORE
    }, {
      id: rand(0, 2),
      score: rand(0, MAX_SCORE - 1)
    }));
  }
  games = res$;
  return games.filter(validGame);
};
validGame = function(game){
  return game.winnerId !== game.loserId;
};
newGame = function(a, b){
  var ref$, winner, loser;
  ref$ = findOutcome(a, b), winner = ref$.winner, loser = ref$.loser;
  return {
    time: Date.now(),
    winnerId: winner.id,
    loserId: loser.id,
    loserScore: loser.score
  };
};
findOutcome = function(a, b){
  if (a.score > b.score) {
    return {
      winner: a,
      loser: b
    };
  } else {
    return {
      winner: b,
      loser: a
    };
  }
};
out$.initialState = initialState = function(config){
  var that;
  if (that = localStorage.getItem(STORAGE_KEY)) {
    return JSON.parse(that);
  } else {
    return blankDataset(config);
  }
};
out$.persistState = persistState = function(it){
  return localStorage.setItem(STORAGE_KEY, JSON.stringify(it));
};
out$.hydrateState = hydrateState = function(){
  return JSON.parse(localStorage.getItem(STORAGE_KEY));
};
out$.getAllPlayers = getAllPlayers = function(){
  return State.records.players;
};
out$.getPlayerFromId = getPlayerFromId = function(pid){
  return State.records.players[pid];
};



},{"./std":14}],13:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, len, sigfig, groupBy, sumLosersScore, generateStats, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('./std'), id = ref$.id, log = ref$.log, len = ref$.len, sigfig = ref$.sigfig;
groupBy = function(λ, list){
  var res;
  res = {};
  list.map(function(x){
    var key$;
    return (res[key$ = λ(x)] || (res[key$] = [])).push(x);
  });
  return res;
};
sumLosersScore = function(games){
  if (games != null) {
    return games.reduce(function(){
      return arguments[0] + arguments[1].loserScore;
    }, 0);
  } else {
    return 0;
  }
};
out$.generateStats = generateStats = function(arg$){
  var players, games, gamesByWinner, gamesByLoser, i$, len$, player, wins, total, results$ = [];
  players = arg$.players, games = arg$.games;
  gamesByWinner = groupBy(function(it){
    return it.winnerId;
  }, games);
  gamesByLoser = groupBy(function(it){
    return it.loserId;
  }, games);
  for (i$ = 0, len$ = players.length; i$ < len$; ++i$) {
    player = players[i$];
    results$.push({
      player: player,
      wins: wins = len(gamesByWinner[player.id]),
      total: total = wins + len(gamesByLoser[player.id]),
      ratio: total ? sigfig(3, wins / total) : 0,
      score: wins * MAX_SCORE + sumLosersScore(gamesByLoser[player.id])
    });
  }
  return results$;
};



},{"./std":14}],14:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var id, log, max, floor, round, rand, invoke, len, sigfig, toArray, qsa, int, findDom, contains, onTap, clear, into, flip, delay, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
out$.id = id = function(it){
  return it;
};
out$.log = log = function(){
  console.log.apply(console, arguments);
  return arguments[0];
};
out$.max = max = Math.max;
out$.floor = floor = Math.floor;
out$.round = round = Math.round;
out$.rand = rand = function(a, b){
  return a + floor(Math.random() * (b - a + 1));
};
out$.invoke = invoke = curry$(function(args, λ){
  return λ.apply(null, args);
});
out$.len = len = function(it){
  var that;
  if ((that = it) != null) {
    return that.length;
  } else {
    return 0;
  }
};
out$.sigfig = sigfig = function(α, n){
  return round(n * Math.pow(10, α)) / Math.pow(10, α);
};
out$.toArray = toArray = function(it){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = it.length; i$ < len$; ++i$) {
    x = it[i$];
    results$.push(x);
  }
  return results$;
};
out$.qsa = qsa = curry$(function(scope, selector){
  return toArray(scope.querySelectorAll(selector));
});
out$.int = int = partialize$.apply(this, [parseInt, [void 8, 10], [0]]);
out$.findDom = findDom = bind$(document, 'querySelector');
out$.contains = contains = function(list, needle){
  return list.indexOf(needle) > -1;
};
out$.onTap = onTap = function(el, λ){
  el.addEventListener('click', λ);
  return el.addEventListener('touchstart', λ);
};
out$.clear = clear = function(host){
  host.innerHTML = "";
  return host;
};
out$.into = into = curry$(function(type, items){
  var el;
  el = document.createElement(type);
  items.map(bind$(el, 'appendChild'));
  return el;
});
out$.flip = flip = function(λ){
  return function(a, b){
    return λ(b, a);
  };
};
out$.delay = delay = flip(setTimeout);
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
function partialize$(f, args, where){
  var context = this;
  return function(){
    var params = slice$.call(arguments), i,
        len = params.length, wlen = where.length,
        ta = args ? args.concat() : [], tw = where ? where.concat() : [];
    for(i = 0; i < len; ++i) { ta[tw[0]] = params[i]; tw.shift(); }
    return len < wlen && len ?
      partialize$.apply(context, [f, ta, tw]) : f.apply(context, ta);
  };
}
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{}]},{},[5])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
